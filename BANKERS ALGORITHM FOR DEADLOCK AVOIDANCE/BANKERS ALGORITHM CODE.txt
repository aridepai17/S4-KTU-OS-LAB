#include <stdio.h>
#include <stdlib.h>

int i,j,k,nop,nor,pid,ch,choice;
int alloc[10][10],maxClm[10][10],MaxAvl[10];
int need[10][10],work[10]={0},avail[10],req[10];

int SAFETY(int arr[10])
{	
	printf("\n\nThe Sequence is : ");
	int finish[10]={0},target=0;
    for (k = 0; k < 5; k++) 
    {	
    	for (i = 0; i < nop; i++) 
        {   
        	if (finish[i] == 0) 
            {   
            	int flag = 0;
                 for (j = 0; j < nor; j++) 
                {	
                	if (need[i][j] > arr[j])
                    {
                        flag = 1;
                        break;      
                    }   
                }
                if (flag == 0) 
                {  
                	printf(" P%d  ",i);
                    for (j = 0; j < nor; j++)
                        arr[j] += alloc[i][j];
                    finish[i] = 1;
                    target++;
                }
            }
        }
    }
    if (target == nop)
        return 1;
    else
        printf("\nThe System is in UNSAFE STATE :(\n");
}

void REQUEST() 
{   
	printf("Enter Process ID  : ");		
	scanf("%d",&pid);
	printf("Enter Resource Vector : ");
	for (j = 0; j < nor; j++)
        scanf("%d", &req[j]);
    for (i = 0; i < nor; i++)
    {   
    	if (req[i] > need[pid][i]) 
       {	
       		printf("Process P%d Exceeded Maximum claim !\n",pid);
            exit(0);	 
        } 
    }

    for (i = 0; i < nor; i++)
    {   
    	if (req[i] > avail[i]) 
        {   
        	printf("Process P%d is Waiting for availableResource !\n",pid);
            exit(0);		 
         }
    }
  
    for (i = 0; i < nor; i++) 
    {  
    	avail[i] -= req[i];
        alloc[pid][i] += req[i];
        need[pid][i] -= req[i];
    }
    ch = SAFETY(avail);
    if (ch == 1)
        printf("\nSystem is in SAFE STATE and Resources are Allocated.\n");		
}

void main()
{   
	printf("Enter the Number of Processes :  ");
	scanf("%d",&nop);
	printf("Enter the Number of Resources  :  ");
	scanf("%d",&nor);
	printf("Enter the Available Matrix :\n");
	for( i=0 ; i<nor ; i++ )
		scanf("%d",&MaxAvl[i]);
	
	printf("Enter the Allocation Matrix : \n");
	for( i=0 ; i < nop ; i++ )
		for ( j=0 ; j< nor ; j++ )
			scanf("%d",&alloc[i][j]);
			
	printf("Enter the Maximum Claim Matrix : \n");
	for( i=0 ; i < nop ; i++ )
		for ( j=0 ; j< nor ; j++ )
			scanf("%d",&maxClm[i][j]);
	
	for( i=0 ; i < nop ; i++ )
		for ( j=0 ; j< nor ; j++ )
			need[i][j] = maxClm[i][j] - alloc[i][j];
	
	for( j=0 ; j<nor ; j++ )
	{   
		for( i=0 ; i<nop ; i++ )
			work[j] += alloc[i][j];
		work[j] = MaxAvl[j] - work[j];
	}	
	for ( i=0 ; i<nor ; i++ )
		avail[i] = work[i];

	printf("\nProcess    Allocation      Max       Need ");
	for ( i=0 ; i<nop ; i++ )
	{	
		printf("\n   P%d      ",i);
		for( j=0 ; j<nor ; j++ )
			printf("  %d",alloc[i][j] );
		printf("   ");
		for( j=0 ; j<nor ; j++ )
			printf("  %d",maxClm[i][j] );
		printf("  ");
		for( j=0 ; j<nor ; j++ )
			printf("  %d",need[i][j] );	}
	ch = SAFETY(work);
	if ( ch == 1 )
	{   
		printf("\n\nThe System is in SAFE STATE !\n");
		printf(" Resource Request needed ? ( Yes=1 ? No=0 )  : ");
		scanf("%d",&choice);
		if(choice)
			REQUEST();		
	}
}